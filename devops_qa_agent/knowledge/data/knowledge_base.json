{
  "build_errors": [
    {
      "keywords": [
        "BUILD FAILED",
        "Compilation failed",
        "编译失败"
      ],
      "question": "构建失败怎么办？",
      "answer": "构建失败通常由以下原因引起：1. 代码语法错误 2. 依赖缺失 3. 环境配置问题。建议检查构建日志，定位具体错误位置。"
    },
    {
      "keywords": [
        "Missing dependency",
        "依赖缺失",
        "package not found"
      ],
      "question": "依赖缺失如何解决？",
      "answer": "依赖缺失解决方案：1. 检查package.json或requirements.txt 2. 运行npm install或pip install 3. 清除缓存后重新安装"
    },
    {
      "keywords": [
        "Permission denied",
        "权限不足"
      ],
      "question": "权限不足怎么处理？",
      "answer": "权限问题解决方法：1. 检查文件权限 2. 使用sudo命令 3. 修改文件所有者 4. 检查SELinux设置"
    },
    {
      "keywords": [
        "Test failure",
        "测试失败"
      ],
      "question": "测试失败如何调试？",
      "answer": "测试失败调试步骤：1. 查看测试日志 2. 检查测试环境 3. 验证测试数据 4. 运行单个测试用例"
    }
  ],
  "general_qa": [
    {
      "keywords": [
        "部署",
        "deploy",
        "发布"
      ],
      "question": "如何部署应用？",
      "answer": "应用部署步骤：1. 构建项目 2. 配置环境变量 3. 启动服务 4. 健康检查 5. 监控运行状态"
    },
    {
      "keywords": [
        "性能",
        "performance",
        "优化"
      ],
      "question": "如何优化应用性能？",
      "answer": "性能优化方法：1. 代码层面优化 2. 数据库查询优化 3. 缓存策略 4. 负载均衡 5. 监控分析"
    }
  ]
}